import fs from 'fs'
import TelegramBot, {
	InlineKeyboardMarkup,
	SendMessageOptions,
	SendPhotoOptions,
} from 'node-telegram-bot-api'
import path from 'path'
import { config } from '../config/env'
import { checkIsAdminUser } from '../middleware/checkAdminRole'
import { prisma } from '../prisma'
import { logger } from '../utils/logger'

type ReleaseState = 'awaiting_content' | 'awaiting_confirm'

interface ReleaseDraft {
	text?: string
	photoFileId?: string // file_id –∏–∑ Telegram
}

interface ReleaseSession {
	adminTelegramId: string // —Å—Ç—Ä–æ–∫–∞, –∫–∞–∫ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ Telegram
	chatId: number // –∫—É–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–≤—å—é/—Å—Ç–∞—Ç—É—Å—ã
	state: ReleaseState
	draft?: ReleaseDraft
	previewMessageId?: number // —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–≤—å—é (–¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
	progressMessageId?: number // –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º)
	cancelRequested?: boolean // —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º
 * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å (master) —É–ø—Ä–∞–≤–ª—è–µ—Ç –±–æ—Ç–æ–º –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
 */
export class TelegramBotService {
	private bot: TelegramBot | null = null
	private isClusterMaster: boolean
	private releaseSessions: Map<string, ReleaseSession> = new Map()
	private warnedChats: Set<string> = new Set()

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
	private static readonly BROADCAST_BATCH_SIZE = 25 // —Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
	private static readonly BROADCAST_DELAY_BETWEEN_BATCH = 1500 // –º—Å –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (~16-17 msg/s)
	private static readonly UPDATE_EVERY_BATCHES = 10 // –∫–∞–∫ —á–∞—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
	private static readonly GROUP_WARNING =
		'–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º.'

	constructor() {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å master –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
		this.isClusterMaster = !process.env.pm_id || process.env.pm_id === '0'

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ
		if (this.isClusterMaster) {
			logger.info(
				'ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ',
				'TELEGRAM_BOT'
			)
			this.initializeBot()
		} else {
			logger.info(
				`‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å ${process.env.pm_id} –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Telegram –±–æ—Ç–∞`,
				'TELEGRAM_BOT'
			)
		}
	}

	/**
	 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ)
	 */
	private initializeBot() {
		try {
			this.bot = new TelegramBot(config.telegram.botToken, {
				polling: true,
				// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
				request: {
					url: '',
					agentOptions: {
						keepAlive: true,
						family: 4, // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ IPv4
					},
				} as any,
			})

			this.setupCommands()
			this.setupErrorHandlers()

			logger.info('‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'TELEGRAM_BOT')
		} catch (error) {
			logger.error(
				'‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞:',
				'TELEGRAM_BOT',
				error
			)
		}
	}

	/**
	 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
	 */
	private setupErrorHandlers() {
		if (!this.bot) return

		this.bot.on('error', error => {
			logger.error('‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞:', 'TELEGRAM_BOT', error)
		})

		this.bot.on('polling_error', error => {
			logger.error('‚ùå –û—à–∏–±–∫–∞ polling Telegram –±–æ—Ç–∞:', 'TELEGRAM_BOT', error)
		})

		// Graceful restart –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
		this.bot.on('webhook_error', error => {
			logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ webhook:', 'TELEGRAM_BOT', error)
		})
	}

	/**
	 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
	 */
	private setupCommands() {
		if (!this.bot) return

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
		this.bot.onText(/\/start/, async msg => {
			try {
				const chatId = msg.chat.id
				const chatType = msg.chat.type
				const userName =
					msg.from?.username || msg.from?.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

				logger.info(
					`üì± –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userName} (${chatId})`,
					'TELEGRAM_BOT'
				)
				if (chatType !== 'private') {
					const key = String(chatId)
					if (!this.warnedChats.has(key)) {
						await this.bot?.sendMessage(
							chatId,
							TelegramBotService.GROUP_WARNING
						)
						this.warnedChats.add(key)
					}
					return
				}
				await this.sendWebAppButton(chatId, chatType)
			} catch (error) {
				logger.error(
					'‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start:',
					'TELEGRAM_BOT',
					error
				)
			}
		})

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /cleanup (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
		this.bot.onText(/\/cleanup/, async msg => {
			const chatId = msg.chat.id
			const telegramId = msg.from?.id?.toString()
			const userName =
				msg.from?.username || msg.from?.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

			try {
				logger.info(
					`üßπ –ö–æ–º–∞–Ω–¥–∞ /cleanup –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userName} (${chatId})`,
					'TELEGRAM_BOT'
				)

				if (!telegramId) {
					await this.bot?.sendMessage(
						chatId,
						'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
					)
					return
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
				const isAdmin = await checkIsAdminUser(telegramId)
				if (!isAdmin) {
					await this.bot?.sendMessage(
						chatId,
						'‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.'
					)
					return
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—á–∏—Å—Ç–∫–∏
				const processingMsg = await this.bot?.sendMessage(
					chatId,
					'üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...'
				)

				try {
					// –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
					let totalDeletedStats = 0

					await prisma.$transaction(async (tx: any) => {
						// 1. –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ —á–µ—Ä–µ–∑ —Å—ã—Ä–æ–π SQL
						const orphanedStatsQuery = (await tx.$queryRaw`
							SELECT ps.id, ps.player_id, ps.club_id, ps.category_name
							FROM player_statistics ps
							LEFT JOIN players p ON ps.player_id = p.id
							LEFT JOIN clubs c ON ps.club_id = c.id
							WHERE p.id IS NULL OR c.id IS NULL
						`) as Array<{
							id: string
							player_id: string
							club_id: string
							category_name: string
						}>

						if (orphanedStatsQuery.length > 0) {
							logger.info(
								`üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ ${orphanedStatsQuery.length} –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫`,
								'TELEGRAM_BOT'
							)

							const deleted = await tx.playerStatistics.deleteMany({
								where: {
									id: {
										in: orphanedStatsQuery.map((stat: any) => stat.id),
									},
								},
							})

							totalDeletedStats += deleted.count
							logger.info(
								`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deleted.count} –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫`,
								'TELEGRAM_BOT'
							)
						}
					})

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
					let resultMessage = ''
					if (totalDeletedStats > 0) {
						resultMessage = `‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\nüìä –£–¥–∞–ª–µ–Ω–æ ${totalDeletedStats} –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏`
					} else {
						resultMessage =
							'‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìä –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ.'
					}

					// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
					if (processingMsg) {
						await this.bot?.editMessageText(resultMessage, {
							chat_id: chatId,
							message_id: processingMsg.message_id,
						})
					} else {
						await this.bot?.sendMessage(chatId, resultMessage)
					}

					logger.info(
						`‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${userName}: —É–¥–∞–ª–µ–Ω–æ ${totalDeletedStats} –∑–∞–ø–∏—Å–µ–π`,
						'TELEGRAM_BOT'
					)
				} catch (cleanupError) {
					logger.error(
						'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫:',
						'TELEGRAM_BOT',
						cleanupError
					)

					const errorMessage =
						'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.'

					// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
					if (processingMsg) {
						await this.bot?.editMessageText(errorMessage, {
							chat_id: chatId,
							message_id: processingMsg.message_id,
						})
					} else {
						await this.bot?.sendMessage(chatId, errorMessage)
					}
				}
			} catch (error) {
				logger.error(
					'‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /cleanup:',
					'TELEGRAM_BOT',
					error
				)
				await this.bot?.sendMessage(
					chatId,
					'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã'
				)
			}
		})

		// /release (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
		this.bot.onText(/\/release/, async msg => {
			const chatId = msg.chat.id
			const telegramId = msg.from?.id?.toString()
			const userName =
				msg.from?.username || msg.from?.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

			try {
				logger.info(
					`üöÄ –ö–æ–º–∞–Ω–¥–∞ /release –æ—Ç ${userName} (${chatId})`,
					'TELEGRAM_BOT'
				)

				if (!telegramId) {
					await this.bot?.sendMessage(
						chatId,
						'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
					)
					return
				}

				const isAdmin = await checkIsAdminUser(telegramId)
				if (!isAdmin) {
					await this.bot?.sendMessage(
						chatId,
						'‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.'
					)
					return
				}

				// –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –±—ã–ª–∞
				this.releaseSessions.delete(telegramId)

				// –°—Ç–∞—Ä—Ç –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
				this.releaseSessions.set(telegramId, {
					adminTelegramId: telegramId,
					chatId,
					state: 'awaiting_content',
					cancelRequested: false,
				})

				await this.bot?.sendMessage(
					chatId,
					'üìù –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–ª–∏–∑–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ò–õ–ò —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –ø–æ–∫–∞–∂—É –ø—Ä–µ–≤—å—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'
				)
			} catch (error) {
				logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /release:', 'TELEGRAM_BOT', error)
				await this.bot?.sendMessage(
					chatId,
					'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã'
				)
			}
		})

		// callback_query –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã —Ä–µ–ª–∏–∑–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
		this.bot.on('callback_query', async query => {
			try {
				if (!query.data || !query.from?.id) return
				const telegramId = query.from.id.toString()
				const session = this.releaseSessions.get(telegramId)
				const data = query.data

				// –û—Ç–¥–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
				if (data === 'release_stop') {
					if (!session) {
						await this.bot?.answerCallbackQuery(query.id, {
							text: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
						})
						return
					}
					session.cancelRequested = true
					this.releaseSessions.set(telegramId, session)
					await this.bot?.answerCallbackQuery(query.id, {
						text: '‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞.',
					})
					// –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–æ–ø, —á—Ç–æ–±—ã –Ω–µ —Ç—ã–∫–∞–ª–∏ –ø–æ —Å—Ç–æ —Ä–∞–∑
					if (session.progressMessageId) {
						await this.safeEditProgress(
							session,
							`‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞...`,
							true /*removeKeyboard*/
						)
					}
					return
				}

				if (!session) return

				const isAdmin = await checkIsAdminUser(telegramId).catch(() => false)
				if (!isAdmin) {
					await this.bot?.answerCallbackQuery(query.id, {
						text: '‚õî –ù–µ –¥–ª—è –≤–∞—Å.',
					})
					return
				}

				if (data === 'release_cancel') {
					this.releaseSessions.delete(telegramId)
					await this.bot?.answerCallbackQuery(query.id, { text: '–û—Ç–º–µ–Ω–µ–Ω–æ.' })
					// –ü—Ä—è—á–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–≤—å—é
					if (session.previewMessageId) {
						await this.bot!.editMessageReplyMarkup(
							{ inline_keyboard: [] },
							{ chat_id: session.chatId, message_id: session.previewMessageId }
						)
					}
					await this.bot?.sendMessage(session.chatId, '‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
					return
				}

				if (data === 'release_confirm') {
					if (!session.draft) {
						await this.bot?.answerCallbackQuery(query.id, {
							text: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.',
						})
						return
					}

					await this.bot?.answerCallbackQuery(query.id, {
						text: '–û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ–º...',
					})
					// –ü—Ä—è—á–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–≤—å—é
					if (session.previewMessageId) {
						await this.bot!.editMessageReplyMarkup(
							{ inline_keyboard: [] },
							{ chat_id: session.chatId, message_id: session.previewMessageId }
						)
					}

					// –°–æ–∑–¥–∞–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å¬ª
					const progress = await this.bot?.sendMessage(
						session.chatId,
						'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 0/0. –£—Å–ø–µ—à–Ω–æ: 0, –æ—à–∏–±–æ–∫: 0.',
						{
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: '‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É',
											callback_data: 'release_stop',
										},
									],
								],
							},
						}
					)
					session.progressMessageId = progress?.message_id
					this.releaseSessions.set(telegramId, session)

					try {
						await this.broadcastRelease(session)
						// —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–æ–≥–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è
						await this.safeEditProgress(
							session,
							'üèÅ –ì–æ—Ç–æ–≤–æ.',
							true /*removeKeyboard*/
						)
					} catch (e) {
						logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ broadcastRelease:', 'TELEGRAM_BOT', e)
						await this.safeEditProgress(
							session,
							'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ.',
							true
						)
					} finally {
						this.releaseSessions.delete(telegramId)
					}
				}
			} catch (e) {
				logger.error(
					'‚ùå –û—à–∏–±–∫–∞ –≤ callback_query –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:',
					'TELEGRAM_BOT',
					e
				)
			}
		})

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
		this.bot.on('message', async msg => {
			try {
				const chatId = msg.chat.id
				const chatType = msg.chat.type
				const telegramId = msg.from?.id?.toString()

				// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤: –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
				if (chatType !== 'private') {
					const key = String(chatId)
					if (!this.warnedChats.has(key)) {
						await this.bot?.sendMessage(
							chatId,
							TelegramBotService.GROUP_WARNING
						)
						this.warnedChats.add(key)
					}
					return
				}

				// –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Å—Å–∏—è —Ä–µ–ª–∏–∑–∞ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
				if (telegramId) {
					const session = this.releaseSessions.get(telegramId)
					if (session) {
						// –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Å–µ—Å—Å–∏–µ–π
						const isAdmin = await checkIsAdminUser(telegramId).catch(
							() => false
						)
						if (isAdmin && session.state === 'awaiting_content') {
							const hasPhoto = !!msg.photo && msg.photo.length > 0
							const caption =
								typeof msg.caption === 'string' ? msg.caption.trim() : undefined
							const textOnly =
								typeof msg.text === 'string' ? msg.text.trim() : undefined

							if (!hasPhoto && !textOnly) {
								await this.bot?.sendMessage(
									session.chatId,
									'‚ùå –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.'
								)
								return
							}

							const draft: ReleaseDraft = {}
							if (hasPhoto) {
								const best = msg.photo!.slice(-1)[0]
								draft.photoFileId = best.file_id
								if (caption) draft.text = caption
							} else if (textOnly) {
								draft.text = textOnly
							}

							session.draft = draft
							session.state = 'awaiting_confirm'
							this.releaseSessions.set(telegramId, session)

							await this.bot?.sendMessage(
								session.chatId,
								'üëÄ –ü—Ä–µ–≤—å—é —Ä–µ–ª–∏–∑–∞. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –≤—Å–µ–º.'
							)
							const previewId = await this.sendReleasePreview(session)
							if (previewId) {
								session.previewMessageId = previewId
								this.releaseSessions.set(telegramId, session)
							}
							return
						}

						if (isAdmin && session.state === 'awaiting_confirm') {
							await this.bot?.sendMessage(
								session.chatId,
								'‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ ‚úÖ –∏–ª–∏ ‚ùå –ø–æ–¥ –ø—Ä–µ–≤—å—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã.'
							)
							return
						}
					}
				}

				// –î–µ—Ñ–æ–ª—Ç: –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤–µ–±-–∞–ø–ø–∞
				if (
					msg.text &&
					!msg.text.startsWith('/start') &&
					!msg.text.startsWith('/cleanup') &&
					!msg.text.startsWith('/release')
				) {
					await this.sendWebAppButton(chatId, chatType)
				}
			} catch (error) {
				logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', 'TELEGRAM_BOT', error)
			}
		})
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	 */
	private async sendWebAppButton(chatId: number, chatType?: string) {
		if (!this.bot) {
			logger.warn(
				'‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!',
				'TELEGRAM_BOT'
			)
			return
		}

		try {
			let messageText = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Myach Pro! ‚öΩ'
			let markup: any = {}

			const type = chatType ?? (await this.getChatTypeSafe(chatId))
			const isPrivate = type === 'private'

			if (config.webApp.url.startsWith('https://')) {
				if (isPrivate) {
					messageText += '\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Ç–∏—Ä-–ª–∏—Å—Ç:'
					const inlineKeyboard = [
						[{ text: '–û—Ç–∫—Ä—ã—Ç—å –¢–∏—Ä –õ–∏—Å—Ç', web_app: { url: config.webApp.url } }],
					]
					markup = { reply_markup: { inline_keyboard: inlineKeyboard } }
				} else {
					messageText += `\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${config.webApp.url}`
					const inlineKeyboard = [
						[{ text: '–û—Ç–∫—Ä—ã—Ç—å –¢–∏—Ä –õ–∏—Å—Ç', url: config.webApp.url }],
					]
					markup = { reply_markup: { inline_keyboard: inlineKeyboard } }
				}
			} else {
				messageText += `\n\nüîó –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${config.webApp.url}\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: WebApp –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —Å HTTPS URL`
			}

			await this.bot.sendMessage(chatId, messageText, markup)
			logger.info(
				`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`,
				'TELEGRAM_BOT'
			)
		} catch (error) {
			logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', 'TELEGRAM_BOT', error)
		}
	}

	/**
	 * –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∏–Ω–∏-–∞–ø–ø–∞
	 */
	private buildAppKeyboard(
		chatType?: string
	): SendMessageOptions | SendPhotoOptions {
		const inlineKeyboard: any[] = []
		const isPrivate = chatType === 'private'
		if (config.webApp.url.startsWith('https://')) {
			if (isPrivate) {
				inlineKeyboard.push([
					{ text: '–û—Ç–∫—Ä—ã—Ç—å –¢–∏—Ä –õ–∏—Å—Ç', web_app: { url: config.webApp.url } },
				])
			} else {
				inlineKeyboard.push([
					{ text: '–û—Ç–∫—Ä—ã—Ç—å –¢–∏—Ä –õ–∏—Å—Ç', url: config.webApp.url },
				])
			}
		}
		return inlineKeyboard.length
			? { reply_markup: { inline_keyboard: inlineKeyboard } }
			: {}
	}

	/**
	 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø —á–∞—Ç–∞: 'private' | 'group' | 'supergroup' | 'channel'
	 */
	private async getChatTypeSafe(
		chatId: number | string
	): Promise<string | undefined> {
		if (!this.bot) return
		try {
			const chat: any = await this.bot.getChat(chatId as any)
			return chat?.type
		} catch {
			return undefined
		}
	}

	/**
	 * –ü—Ä–µ–≤—å—é —Ä–µ–ª–∏–∑–∞ –∞–¥–º–∏–Ω—É
	 */
	private async sendReleasePreview(
		session: ReleaseSession
	): Promise<number | undefined> {
		const { chatId, draft } = session
		if (!this.bot || !draft) return

		const confirmKeyboard: InlineKeyboardMarkup = {
			inline_keyboard: [
				[{ text: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º', callback_data: 'release_confirm' }],
				[{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'release_cancel' }],
			],
		}

		if (draft.photoFileId) {
			const m = await this.bot.sendPhoto(chatId, draft.photoFileId, {
				caption: draft.text || '',
				reply_markup: confirmKeyboard,
			})
			return m.message_id
		} else {
			const m = await this.bot.sendMessage(chatId, draft.text || '(–ø—É—Å—Ç–æ)', {
				reply_markup: confirmKeyboard,
			})
			return m.message_id
		}
	}

	/**
	 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
	 */
	private async safeEditProgress(
		session: ReleaseSession,
		text: string,
		removeKeyboard = false
	) {
		if (!this.bot || !session.progressMessageId) return
		try {
			await this.bot.editMessageText(text, {
				chat_id: session.chatId,
				message_id: session.progressMessageId,
				reply_markup: removeKeyboard
					? { inline_keyboard: [] }
					: {
							inline_keyboard: [
								[
									{
										text: '‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É',
										callback_data: 'release_stop',
									},
								],
							],
					  },
			} as any)
		} catch (e: any) {
			const retryAfter =
				e?.response?.body?.parameters?.retry_after ||
				e?.response?.parameters?.retry_after
			if (retryAfter) {
				await new Promise(r => setTimeout(r, Number(retryAfter) * 1000))
				try {
					await this.bot.editMessageText(text, {
						chat_id: session.chatId,
						message_id: session.progressMessageId,
						reply_markup: removeKeyboard
							? { inline_keyboard: [] }
							: {
									inline_keyboard: [
										[
											{
												text: '‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É',
												callback_data: 'release_stop',
											},
										],
									],
							  },
					} as any)
				} catch {
					/* –ª–∞–¥–Ω–æ, –ø–µ—Ä–µ–∂–∏–≤—ë–º */
				}
			}
		}
	}

	/**
	 * –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –±–∞–∑–µ
	 */
	private async broadcastRelease(session: ReleaseSession) {
		if (!this.bot || !session.draft) return
		const appKeyboard = this.buildAppKeyboard('private')
		const draft = session.draft

		// –ë–µ—Ä—ë–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		const users = await prisma.user.findMany({
			select: { telegramId: true },
		})

		// –ß–∞—Ç-–∞–π–¥–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ (–±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏), –Ω–µ —à–ª—ë–º –∞–¥–º–∏–Ω—É
		const audience: string[] = users
			.map(u => String((u as any).telegramId))
			.filter(s => !!s && s !== session.adminTelegramId)

		const total = audience.length
		logger.info(`üì£ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É: ${total} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π`, 'TELEGRAM_BOT')

		// –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —Å–æ–∑–¥–∞–¥–∏–º (–Ω–∞ –≤—Å—è–∫–∏–π)
		if (!session.progressMessageId) {
			const m = await this.bot!.sendMessage(
				session.chatId,
				'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 0/0. –£—Å–ø–µ—à–Ω–æ: 0, –æ—à–∏–±–æ–∫: 0.',
				{
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: '‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É',
									callback_data: 'release_stop',
								},
							],
						],
					},
				}
			)
			session.progressMessageId = m.message_id
			this.releaseSessions.set(session.adminTelegramId, session)
		}

		// –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏
		const batches: string[][] = []
		for (
			let i = 0;
			i < audience.length;
			i += TelegramBotService.BROADCAST_BATCH_SIZE
		) {
			batches.push(
				audience.slice(i, i + TelegramBotService.BROADCAST_BATCH_SIZE)
			)
		}

		let sent = 0
		let failed = 0
		let lastEditedBatch = -1

		// —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
		const updateProgress = async () => {
			await this.safeEditProgress(
				session,
				`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${Math.min(
					sent + failed,
					total
				)}/${total}. –£—Å–ø–µ—à–Ω–æ: ${sent}, –æ—à–∏–±–æ–∫: ${failed}.`
			)
		}

		for (let b = 0; b < batches.length; b++) {
			// –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –±–∞—Ç—á–µ–º
			if (session.cancelRequested) {
				await this.safeEditProgress(
					session,
					`‚õî –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}\n–û—à–∏–±–æ–∫: ${failed}\n–í—Å–µ–≥–æ –±—ã–ª–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${total}`,
					true
				)
				logger.warn(
					`‚õî –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º. sent=${sent}, failed=${failed}`,
					'TELEGRAM_BOT'
				)
				return
			}

			const batch = batches[b]

			const results = await Promise.allSettled(
				batch.map(async chatIdStr => {
					try {
						if (draft.photoFileId) {
							await this.bot!.sendPhoto(chatIdStr, draft.photoFileId!, {
								caption: draft.text || '',
								...(appKeyboard as SendPhotoOptions),
							})
						} else {
							await this.bot!.sendMessage(
								chatIdStr,
								draft.text || '',
								appKeyboard as any
							)
						}
						return true
					} catch (e: any) {
						const retryAfter =
							e?.response?.body?.parameters?.retry_after ||
							e?.response?.parameters?.retry_after
						if (retryAfter && Number.isFinite(Number(retryAfter))) {
							await new Promise(r => setTimeout(r, Number(retryAfter) * 1000))
							try {
								if (draft.photoFileId) {
									await this.bot!.sendPhoto(chatIdStr, draft.photoFileId!, {
										caption: draft.text || '',
										...(appKeyboard as SendPhotoOptions),
									})
								} else {
									await this.bot!.sendMessage(
										chatIdStr,
										draft.text || '',
										appKeyboard as any
									)
								}
								return true
							} catch (e2) {
								throw e2
							}
						}
						throw e
					}
				})
			)

			for (const r of results) {
				if (r.status === 'fulfilled' && r.value === true) sent++
				else failed++
			}

			// —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ–¥–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
			if (b - lastEditedBatch >= TelegramBotService.UPDATE_EVERY_BATCHES) {
				await updateProgress()
				lastEditedBatch = b
			}

			// –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
			if (b < batches.length - 1) {
				await new Promise(r =>
					setTimeout(r, TelegramBotService.BROADCAST_DELAY_BETWEEN_BATCH)
				)
			}
		}

		// —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
		await this.safeEditProgress(
			session,
			`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}\n–û—à–∏–±–æ–∫: ${failed}\n–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${total}`,
			true
		)

		logger.info(
			`üèÅ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –≤—Å–µ–≥–æ=${total}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ=${sent}, –æ—à–∏–±–æ–∫=${failed}`,
			'TELEGRAM_BOT'
		)
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞ (–¥–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ —à—ç—Ä–∏–Ω–≥–∞)
	 */
	public async sendImage(
		chatId: number,
		imageBuffer: Buffer,
		caption?: string
	): Promise<boolean> {
		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ Buffer
		logger.info(
			`üîç TelegramBotService.sendImage –≤—ã–∑–≤–∞–Ω: chatId=${chatId}, buffer —Å—É—â–µ—Å—Ç–≤—É–µ—Ç=${!!imageBuffer}, —Ä–∞–∑–º–µ—Ä=${
				imageBuffer?.length || 0
			}, —Ç–∏–ø=${typeof imageBuffer}`,
			'TELEGRAM_BOT'
		)

		if (!this.bot) {
			logger.warn(
				'‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
				'TELEGRAM_BOT'
			)
			return false
		}

		// –í–∞–ª–∏–¥–∞—Ü–∏—è Buffer –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
		if (!imageBuffer || imageBuffer.length === 0) {
			logger.error(
				'‚ùå Buffer –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
				'TELEGRAM_BOT'
			)
			return false
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ Buffer
		if (!Buffer.isBuffer(imageBuffer)) {
			logger.error(
				`‚ùå –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Buffer: —Ç–∏–ø=${typeof imageBuffer}, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä=${
					(imageBuffer as any)?.constructor?.name
				}`,
				'TELEGRAM_BOT'
			)
			return false
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Buffer —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–µ JPEG –¥–∞–Ω–Ω—ã–µ
		const isValidJPEG = this.validateJPEGBuffer(imageBuffer)
		if (!isValidJPEG) {
			logger.error(
				'‚ùå Buffer –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö JPEG –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –º–µ—Ç–æ–¥',
				'TELEGRAM_BOT'
			)

			// –°—Ä–∞–∑—É –ø—Ä–æ–±—É–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –º–µ—Ç–æ–¥ –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º Buffer
			try {
				return await this.sendImageViaFile(chatId, imageBuffer, caption)
			} catch (fileError) {
				logger.error(
					'‚ùå –§–∞–π–ª–æ–≤—ã–π –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:',
					'TELEGRAM_BOT',
					fileError
				)
				return false
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
		const imageSizeMB = imageBuffer.length / (1024 * 1024)
		logger.info(
			`üì∑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageSizeMB.toFixed(
				2
			)}MB –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`,
			'TELEGRAM_BOT'
		)

		// –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –ø—Ä–æ–±—É–µ–º —É–º–µ–Ω—å—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ
		if (imageSizeMB > 5) {
			logger.warn(
				`‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (${imageSizeMB.toFixed(
					2
				)}MB), –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π`,
				'TELEGRAM_BOT'
			)
		}

		let attempt = 0
		const maxAttempts = 3

		while (attempt < maxAttempts) {
			try {
				attempt++
				logger.info(
					`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ #${attempt} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`,
					'TELEGRAM_BOT'
				)

				// –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è —Ä–∞–∑–±–∏–≤–∞–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
				const result = await new Promise<boolean>((resolve, reject) => {
					setTimeout(async () => {
						try {
							if (!this.bot) {
								throw new Error('–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
							}

							// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ –∏ —Å–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
							const chatType = await this.getChatTypeSafe(chatId)
							const isPrivate = chatType === 'private'
							const inlineKeyboard: any[] = []
							if (config.webApp.url.startsWith('https://')) {
								inlineKeyboard.push([
									isPrivate
										? {
												text: 'üéØ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Ç–∏—Ä-–ª–∏—Å—Ç',
												web_app: { url: config.webApp.url },
										  }
										: {
												text: 'üéØ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Ç–∏—Ä-–ª–∏—Å—Ç',
												url: config.webApp.url,
										  },
								])
							}

							await this.bot.sendPhoto(chatId, imageBuffer, {
								caption: caption || '–í–∞—à —Ç–∏—Ä-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤! üéØ',
								reply_markup: {
									inline_keyboard: inlineKeyboard,
								},
							})

							logger.info(
								`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId} (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`,
								'TELEGRAM_BOT'
							)
							resolve(true)
						} catch (error) {
							reject(error)
						}
					}, attempt * 1000) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
				})

				return result
			} catch (error) {
				const errorMessage =
					error instanceof Error ? error.message : String(error)

				logger.error(
					`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts}):`,
					'TELEGRAM_BOT',
					error
				)

				// –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å Buffer file-type –∏–ª–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–µ–∫–∞, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
				if (
					errorMessage.includes('Maximum call stack size exceeded') ||
					errorMessage.includes('Unsupported Buffer file-type') ||
					errorMessage.includes('EFATAL')
				) {
					logger.warn(
						`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ Buffer/—Å—Ç–µ–∫–∞, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ —Ñ–∞–π–ª`,
						'TELEGRAM_BOT'
					)

					try {
						const fileResult = await this.sendImageViaFile(
							chatId,
							imageBuffer,
							caption
						)
						if (fileResult) {
							logger.info(
								`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ Buffer`,
								'TELEGRAM_BOT'
							)
							return true
						}
					} catch (fileError) {
						logger.error(
							'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª:',
							'TELEGRAM_BOT',
							fileError
						)
					}

					if (attempt < maxAttempts) {
						await new Promise(resolve => setTimeout(resolve, attempt * 2000))
						continue
					}
				}

				// –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏–ª–∏ –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–µ–∫–∞
				if (attempt >= maxAttempts) {
					logger.error(
						`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`,
						'TELEGRAM_BOT'
					)
					return false
				}

				// –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
				await new Promise(resolve => setTimeout(resolve, 1000 * attempt))
			}
		}

		return false
	}

	/**
	 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —á—Ç–æ Buffer —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ JPEG –¥–∞–Ω–Ω—ã–µ
	 */
	private validateJPEGBuffer(buffer: Buffer): boolean {
		try {
			if (!buffer || buffer.length < 10) {
				return false
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º JPEG –∑–∞–≥–æ–ª–æ–≤–æ–∫ (FF D8 FF)
			const jpegHeader = buffer.subarray(0, 3)
			const isJPEG =
				jpegHeader[0] === 0xff &&
				jpegHeader[1] === 0xd8 &&
				jpegHeader[2] === 0xff

			if (!isJPEG) {
				logger.error(
					`‚ùå Buffer –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç JPEG –∑–∞–≥–æ–ª–æ–≤–∫–∞: ${jpegHeader.toString('hex')}`,
					'TELEGRAM_BOT'
				)
				return false
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º JPEG –æ–∫–æ–Ω—á–∞–Ω–∏–µ (FF D9)
			const jpegFooter = buffer.subarray(-2)
			const hasValidEnd = jpegFooter[0] === 0xff && jpegFooter[1] === 0xd9

			if (!hasValidEnd) {
				logger.warn(
					`‚ö†Ô∏è Buffer –Ω–µ –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JPEG –æ–∫–æ–Ω—á–∞–Ω–∏—è, –Ω–æ –∏–º–µ–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫`,
					'TELEGRAM_BOT'
				)
				// –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å—Ç—å
				return true
			}

			return true
		} catch (error) {
			logger.error(
				'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JPEG Buffer:',
				'TELEGRAM_BOT',
				error as Error
			)
			return false
		}
	}

	/**
	 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å Buffer
	 */
	private async sendImageViaFile(
		chatId: number,
		imageBuffer: Buffer,
		caption?: string
	): Promise<boolean> {
		const tempDir = path.join(process.cwd(), 'tmp')
		const tempFileName = `temp_image_${Date.now()}_${Math.random()
			.toString(36)
			.substr(2, 9)}.jpg`
		const tempFilePath = path.join(tempDir, tempFileName)

		try {
			// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É tmp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
			if (!fs.existsSync(tempDir)) {
				fs.mkdirSync(tempDir, { recursive: true })
			}

			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
			fs.writeFileSync(tempFilePath, imageBuffer)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∞–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
			if (!fs.existsSync(tempFilePath)) {
				throw new Error('–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω')
			}

			const fileStats = fs.statSync(tempFilePath)
			if (fileStats.size === 0) {
				throw new Error('–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π')
			}

			if (fileStats.size !== imageBuffer.length) {
				logger.warn(
					`‚ö†Ô∏è –†–∞–∑–º–µ—Ä –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (${fileStats.size}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–∞–∑–º–µ—Ä–æ–º Buffer (${imageBuffer.length})`,
					'TELEGRAM_BOT'
				)
			}

			logger.info(
				`üíæ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${tempFilePath} (${fileStats.size} –±–∞–π—Ç)`,
				'TELEGRAM_BOT'
			)

			if (!this.bot) {
				throw new Error('–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ –∏ —Å–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
			const chatType = await this.getChatTypeSafe(chatId)
			const isPrivate = chatType === 'private'
			const inlineKeyboard: any[] = []
			if (config.webApp.url.startsWith('https://')) {
				inlineKeyboard.push([
					isPrivate
						? {
								text: 'üéØ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Ç–∏—Ä-–ª–∏—Å—Ç',
								web_app: { url: config.webApp.url },
						  }
						: { text: 'üéØ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Ç–∏—Ä-–ª–∏—Å—Ç', url: config.webApp.url },
				])
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
			await this.bot.sendPhoto(chatId, tempFilePath, {
				caption: caption || '–í–∞—à —Ç–∏—Ä-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤! üéØ',
				reply_markup: {
					inline_keyboard: inlineKeyboard,
				},
			})

			logger.info(
				`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`,
				'TELEGRAM_BOT'
			)

			return true
		} catch (error) {
			logger.error(
				'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ–∞–π–ª:',
				'TELEGRAM_BOT',
				error
			)
			return false
		} finally {
			// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
			try {
				if (fs.existsSync(tempFilePath)) {
					fs.unlinkSync(tempFilePath)
				}
			} catch (cleanupError) {
				logger.error(
					'‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:',
					'TELEGRAM_BOT',
					cleanupError
				)
			}
		}
	}

	/**
	 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å null –≤ worker –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö)
	 */
	public getBot(): TelegramBot | null {
		return this.bot
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
	 */
	public isBotAvailable(): boolean {
		return this.isClusterMaster && this.bot !== null
	}

	/**
	 * Graceful shutdown –±–æ—Ç–∞
	 */
	public async shutdown(): Promise<void> {
		if (this.bot && this.isClusterMaster) {
			logger.info('üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...', 'TELEGRAM_BOT')
			try {
				await this.bot.stopPolling()
				logger.info('‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'TELEGRAM_BOT')
			} catch (error) {
				logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:', 'TELEGRAM_BOT', error)
			}
		}
	}
}
